generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  cartItems Cart[]
  orders    Order[]

  address UserAddress?

  Review Review[]

  Comment Comment[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  quantity    Int
  description String
  category    String[] // Supports multiple categories
  material    String[] // Supports multiple materials
  length      Float? // Optional dimension
  width       Float? // Optional dimension
  breadth     Float? // Optional dimension
  images      String[] // Supports multiple images
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("inactive")

  // Relations
  cartItems Cart[]

  OrderItem OrderItem[]

  Review Review[]
}

model OTP {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  userAddressId String?
  status        OrderStatus @default(PENDING)
  totalAmount   Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  userAddress UserAddress? @relation(fields: [userAddressId], references: [id])
  orderItems  OrderItem[]
}

model UserAddress {
  id          String   @id @default(uuid())
  userId      String   @unique
  phoneNumber String
  address     String
  city        String
  postalCode  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  NOTICED
  WORKING
  READYTOSHIP
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id        String    @id @default(cuid())
  productId String
  userId    String
  rating    Int       @default(5)
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Comment {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  content   String
  parentId  String?  @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User      @relation(fields: [userId], references: [id])
  review  Review    @relation(fields: [reviewId], references: [id])
  parent  Comment?  @relation("Reply", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("Reply")

  @@map("comments")
}

model GalleryArt {
  id        String   @id @default(cuid())
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
